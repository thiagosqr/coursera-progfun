Other Sequeces

    Vectors: up to 32 is a simples array
        After 32 pos is an array od 32 positions each pointing to and array of 32 pos and so on

        It goes like
        32     pos
        2 ˆ 10 pos
        2 ˆ 15 pos
        2 ˆ 20 pos
        2 ˆ 25 pos
        2 ˆ 30 pos

        Where it's depth is defined by log32(n)

        Vectors are better for map and fold
        Lists are better for operations when taking the head of tail is faster

        Operations on Vectors

        val nums = Vector(1,2,3)

        Supports the same operations of lists except ::

        Instead of x :: xs there is

        x +: xs Creates new Vector with leading element x followed by all elements of xs
        xs :+ x Creater new vector

        Note that : always points to the Collection


        Collection Hiearchy

                              Iterable
                             /   |   \
                            /    |    \
                           /     |     \
                          /      |      \
 Array and String . . . Seq     Set     Map
                        /| \
                       / |  \
                      /  |   \
                  List Vector Range

        Arrays and String supports same operations as Sequences. Altough are imported from JAva
        they Support Seq operations

          val xs = Array(1,2,3,44)

          xs map (x => x * 2)

          val s = "Hello World"

          s.filter (c => c.isUpper)


        Ranges
            Sequence of evenly spaced integers

            val r: Range = 1 until 5 //1,2,3,4
            val r: Range = 1 to 5    //1,2,3,4,5

            1 to 10 by 3             //1,4,7,10
            6 to 1 by -2             //6,4,2


        Methods on Collections

        xs exists p    true if there is an element x of xs such that p(x) holds, false otherwise.
        xs forall p    true if p(x) holds for all elements x of xs, false other-wise.
        xs zip ys      A sequence of pairs drawn from corresponding elements of sequences xs and ys.
        xs. unzip      Splits a sequence of pairs xs into two sequences consist-ing of the first, respectively second halves of all pairs.
        xs.map         Maps every entry of a collection returning a collection of collection
        map.flatten    flats the map returning a single collection of the values concatenating(++) like (xs foldRight Seq[Int]())(_ ++ _)
        xs.flatMap f   Applies collection-valued function f to all elements of xs and concatenates the results is flat + flatten
        xs.sum         The sum of all elements of this numeric collection.
        xs.product     The product of all elements of this numeric collection.
        xs.max         The maximum of all elements of this collection (an Ordering must exist)
        xs.min         The minimum of all elements of this collection

        Useful Law

        xs flatMap f == (x map f).flatten

        Handling Nested Sequences (Nested Loops)

          //for(int i){
          //  for(int j){
          //  }
          //}
          //Sequence of sum of elements to a theshold where
          //the sum of the numbers is a prime number

          (1 until n) flatMap(i =>
            (1 until i) map (j => (i, j))) filter (pair =>
            isPrime(pair._1 + pair._2))

        //Kinda complicated expression simplify with For Expresions

        For Expression

        case class Person(name: String, age: Int)

        for (p <- persons if p.age > 20) yield p.name

        the older way would be
        persons filter (p => p.age > 20) map (p => p.name)

        for expressions are similar to for Loops without side effects cause they don't change anything

        Structure is for (s) yield e

            s = Sequence of Generators and Filters
            Generator p <- e where p is a pattern and e an expression whose value is a collection
            Filter == if f where f is a boolean expression

            If there are severel generators in the p the last one increments faster than the others

            instead of (s) it can use multiple lines with { } and generators separated by semicolons


        //Inserts notes from Lecture 6.3



        Queries with for

        For Expressions and High-Order Functions

        Maping functions represented with for

        def map[T, U](xs: List[T], f: T => U): List[U] =
            for(x <- xs) yield f(x)

        def flatMap[T,U](xs: List[T], f: T => Iterable[U]): List[U] =
            for(x <- xs; y <-f(x)) yield y

        def filter[T](xs: List[T], p: T => Boolean): List[T] =
             for(x <- xs if p(x)) yield x


        Traslation of for

        for (x <- e1 ) yield e2 ====== traslated by compiler to ======= e1.map(x => e2)



        However the Scala compiler convert for expressions in terms of map, flatMap and a lazy variant of Filter




        Option Type

        trait Option[+A]
        case class Some[+A](value: A) extends Option[A]
        object None extends Option[Nothing]

        Can use match case


        Repeted Parameters

        class Classe(x: String){
            def this(x: String*) //* after the arg represent n time args
        }








